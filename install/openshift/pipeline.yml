---
- name: Create jenkins pipelines for components
  gather_facts: false
  hosts: localhost
  vars_files:
    - vars_secrets.yml
    - vars_common.yml
    - vars_env_{{ STAGE }}.yml
  vars:
    stage1:
      name: "dev"
      namespace: "dfroehli-opendj-dev"
      tag: "latest"
    stage2:
      name: "tst"
      namespace: "dfroehli-opendj-tst"
      tag: "test"
  tasks:
    - name: "Combine env facts"
      set_fact:
        ENV: "{{ common | combine( specific, recursive=True) }}"
    - name: Grant access fro jenkins
      shell: oc policy add-role-to-user view system:serviceaccount:{{stage1.namespace}}:jenkins -n {{stage2.namespace}}

    - name: "Create pipeline"
      k8s:
        state: present
        wait: true
        definition:
          apiVersion: v1
          kind: BuildConfig
          metadata:
            name: pipeline-{{item}}
            namespace: "{{stage1.namespace}}"
          spec:
            strategy:
              jenkinsPipelineStrategy:
                  jenkinsfile: |-
                    node {
                        stage('Build and deploy {{stage1.name}}') {
                            openshiftBuild(buildConfig: '{{item}}', namespace: '{{stage1.namespace}}', showBuildLogs: 'true')
                        }

                        stage('Verify deployment {{stage1.name}}') {
                            openshiftVerifyBuild(buildConfig: '{{item}}', checkForTriggeredDeployments: 'false', namespace: '{{stage1.namespace}}', waitTime: '120000' )
                            openshiftVerifyDeployment(deploymentConfig: '{{item}}', namespace: '{{stage1.namespace}}', waitTime: '120000' )
                        }

                        stage('RunTests') {
                          sleep 2
                        }

                        stage('ApproveTo{{stage2.name}}') {
                          input "GO for {{stage2.name}}?"
                        }

                        stage("Initiate {{stage2.name}} Deployment") {
                          openshiftTag srcStream: '{{item}}', srcTag: '{{stage1.tag}}', destinationStream: '{{item}}', destinationTag: '{{stage2.tag}}', namespace: '{{stage1.namespace}}'
                        }

                        stage("Verify {{stage2.name}} Deployment") {
                          openshiftVerifyDeployment deploymentConfig: '{{item}}', namespace: '{{stage2.namespace}}', waitTime: '120000'
                        }
                    }
              type: JenkinsPipelin
      with_items:
        - provider-spotify
        - service-playlist
        - service-web
        - frontend-web

            

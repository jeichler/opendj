- kind: ImageStream
  apiVersion: image.openshift.io/v1
  metadata:
    labels:
      app: service-eventactivity
    name: ubi-quarkus-native-s2i
    namespace: "{{ENV.COMMON.NAMESPACE|mandatory}}"
  spec:
    lookupPolicy:
      local: false
    tags:
      - annotations: null
        from:
          kind: DockerImage
          name: quay.io/quarkus/ubi-quarkus-native-s2i:19.2.1
        generation: 2
        importPolicy:
          scheduled : true
        name: 19.2.1
        referencePolicy:
          type: Local

- kind: ImageStream
  apiVersion: image.openshift.io/v1
  metadata:
    labels:
      app: service-eventactivity
    name: ubi-minimal
    namespace: "{{ENV.COMMON.NAMESPACE|mandatory}}"
  spec:
    lookupPolicy:
      local: false
    tags:
      - annotations: null
        from:
          kind: DockerImage
          name: registry.access.redhat.com/ubi7/ubi-minimal:latest
        generation: 2
        importPolicy:
          scheduled : true
        name: latest
        referencePolicy:
          type: Local

- kind: ImageStream
  apiVersion: image.openshift.io/v1
  metadata:
    labels:
      app: service-eventactivity
    name: service-eventactivity-native
    namespace: "{{ENV.COMMON.NAMESPACE|mandatory}}"
  spec:
    lookupPolicy:
      local: false

- kind: ImageStream
  apiVersion: image.openshift.io/v1
  metadata:
    labels:
      app: service-eventactivity
    name: service-eventactivity-minimal
    namespace: "{{ENV.COMMON.NAMESPACE|mandatory}}"
  spec:
    lookupPolicy:
      local: false

- kind: BuildConfig
  apiVersion: build.openshift.io/v1
  metadata:
    labels:
      app: service-eventactivity
    name: service-eventactivity-native
    namespace: "{{ENV.COMMON.NAMESPACE|mandatory}}"
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: service-eventactivity-native:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      contextDir: components/service-eventactivity
      git:
        ref: "{{ENV.COMMON.GIT.REF | default('master')}}"
        uri: https://github.com/opendj/opendj.git
      type: Git
    strategy:
      sourceStrategy:
        env:
        - name: NPM_MIRROR
        from:
          kind: ImageStreamTag
          name: ubi-quarkus-native-s2i:19.2.1
      type: Source
    successfulBuildsHistoryLimit: 2
    triggers:
    - imageChange:
      type: ImageChange
    - type: ConfigChange
    - github:
        secret: 1qTuy4R321UDqOMqivTxpwrUN0brGdIONGdyBeCxX
      type: GitHub
    - generic:
        secret: rEVLkWDcrlBxPuionusPj0CL4A1H1DsFCMYPCdSx
      type: Generic

- kind: BuildConfig
  apiVersion: build.openshift.io/v1
  metadata:
    labels:
      app: service-eventactivity
    name: service-eventactivity-minimal
    namespace: "{{ENV.COMMON.NAMESPACE|mandatory}}"
  spec:
    failedBuildsHistoryLimit: 5
    nodeSelector: null
    output:
      to:
        kind: ImageStreamTag
        name: service-eventactivity-minimal:latest
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      dockerfile: |-
        FROM registry/{{ENV.COMMON.NAMESPACE}}/ubi-minimal:latest
        COPY application /application
        CMD /application
        EXPOSE 8080
      images:
        - as: null
          from:
            kind: ImageStreamTag
            name: 'service-eventactivity-native:latest'
          paths:
            - destinationDir: .
              sourcePath: /home/quarkus/application
      type: Dockerfile
    strategy:
      dockerStrategy:
        from:
          kind: ImageStreamTag
          name: 'ubi-minimal:latest'
      type: Docker

    successfulBuildsHistoryLimit: 2
    triggers:
      - imageChange:
          from:
            kind: ImageStreamTag
            name: 'service-eventactivity-native:latest'
        type: ImageChange
      - imageChange:
          from:
            kind: ImageStreamTag
            name: 'ubi-minimal:latest'
        type: ImageChange
      - type: ConfigChange
      - github:
          secret: 1qTuy4R321UDqOMqivTxpwrUN0brGdIONGdyBeCxX
        type: GitHub
      - generic:
          secret: rEVLkWDcrlBxPuionusPj0CL4A1H1DsFCMYPCdSx
        type: Generic

- kind: DeploymentConfig
  apiVersion: apps.openshift.io/v1
  metadata:
    annotations:
      template.alpha.openshift.io/wait-for-ready: 'true'
    labels:
      app: service-eventactivity
      template: opendj-nodejs-service-eventactivity
    name: service-eventactivity
    namespace: "{{ENV.COMMON.NAMESPACE|mandatory}}"
  spec:
    replicas: "{{ENV.SERVICE_EVENTACTIVITY.REPLICAS | default('2')}}"
    revisionHistoryLimit: 10
    selector:
      name: service-eventactivity
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 60
      resources: {}
      type: Rolling
    template:
      metadata:
        labels:
          name: service-eventactivity
        name: service-eventactivity
      spec:
        containers:
          - env:
              - name: LOG_LEVEL
                value: "{{ENV.SERVICE_EVENTACTIVITY.LOG_LEVEL | default('info')}}"
            imagePullPolicy: IfNotPresent
            name: service-eventactivity-minimal
            resources:
              limits:
                cpu: 1000m
                memory: 80Mi
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
      - imageChangeParams:
          automatic: true
          containerNames:
            - service-eventactivity-minimal
          from:
            kind: ImageStreamTag
            name: 'service-eventactivity-minimal:{{ENV.COMMON.CONTAINER_IMAGE_TAG}}'
            namespace: "{{ENV.COMMON.CONTAINER_IMAGE_FROM_NAMESPACE | mandatory}}"
        type: ImageChange
      - type: ConfigChange

- kind: Service
  apiVersion: v1
  metadata:
    labels:
      app: service-eventactivity
    name: service-eventactivity
    namespace: "{{ENV.COMMON.NAMESPACE|mandatory}}"
  spec:
    ports:
      - name: web
        port: 8080
        protocol: TCP
        targetPort: 8080
    selector:
      name: service-eventactivity
    sessionAffinity: None
    type: ClusterIP

---
- name: Install provider-spotify
  gather_facts: false
  hosts: localhost
  vars_files:
    - ../../../install/openshift/vars_secrets.yml
    - ../../../install/openshift/vars_common.yml
    - ../../../install/openshift/vars_env_{{ STAGE }}.yml
  tasks:
    - name: "Combine env facts"
      tags: always
      set_fact:
        ENV: "{{ common | combine( specific, recursive=True) }}"
    - name: Create Spotify secret
      shell: |
        oc create secret generic spotify-api-credentials  --from-literal=CLIENT_ID={{ENV.PROVIDER_SPOTIFY.SPOTIFY_CLIENT_ID | mandatory}} --from-literal=CLIENT_SECRET={{ENV.PROVIDER_SPOTIFY.SPOTIFY_CLIENT_SECRET | mandatory}} --namespace {{ENV.COMMON.NAMESPACE}}
      register: createSecret
      failed_when: "createSecret.rc != 0 and 'already exists' not in createSecret.stderr" 
      changed_when: "'already exists' not in createSecret.stderr" 

    - name: Create kafka topic 
      when: ENV.BACKEND_EVENTSTORE.KAFKA.USE
      command: "{{ENV.BACKEND_EVENTSTORE.KAFKA.TOPIC_CMD|mandatory}} --create --topic opendj.state.provider-spotify --partitions {{ENV.BACKEND_EVENTSTORE.KAFKA.NUM_PARTITIONS}} --replication-factor {{ENV.BACKEND_EVENTSTORE.KAFKA.NUM_BROKERS}} --config retention.ms=43200000" 
      register: topic_result
      failed_when: 'topic_result.rc != 0 and "already exists" not in topic_result.stderr'
      changed_when: '"already exists" not in topic_result.stderr'

    - name: Create ImageStreamTag
      when: ENV.COMMON.CONTAINER_IMAGE_BUILD
      k8s:
        state: present
        wait: true
        definition:
          kind: ImageStream
          apiVersion: image.openshift.io/v1
          metadata:
            annotations:
            labels:
              app: provider-spotify
            name: provider-spotify
            namespace: "{{ENV.COMMON.NAMESPACE|mandatory}}"
          spec:
            lookupPolicy:
              local: false
    - name: Create BuildConfig
      when: ENV.COMMON.CONTAINER_IMAGE_BUILD
      k8s:
        state: present
        wait: true
        definition:
          kind: BuildConfig
          apiVersion: build.openshift.io/v1
          metadata:
            annotations:
            labels:
              app: provider-spotify
            name: provider-spotify
            namespace: "{{ENV.COMMON.NAMESPACE|mandatory}}"
          spec:
            failedBuildsHistoryLimit: 5
            nodeSelector: null
            output:
              to:
                kind: ImageStreamTag
                name: provider-spotify:latest
            postCommit: {}
            resources: {}
            runPolicy: Serial
            source:
              contextDir: components/provider-spotify
              git:
                ref: "{{ENV.COMMON.GIT.REF | default('master')}}"
                uri: https://github.com/opendj/opendj.git
              type: Git
            strategy:
              sourceStrategy:
                env:
                - name: NPM_MIRROR
                from:
                  kind: ImageStreamTag
                  name: nodejs:10
                  namespace: openshift
              type: Source
            successfulBuildsHistoryLimit: 2
            triggers:
            - imageChange:
              type: ImageChange
            - type: ConfigChange
            - github:
                secret: 1qTuy4R21UDqOMqivTxpwrUN0brGdIONGdyBeCxX
              type: GitHub
            - generic:
                secret: rEVLkWDcrlBoPuionusPj0CL4A1H1DsFCMYPCdSw
              type: Generic
    - name: Create DeploymentConfig
      k8s:
        state: present
        wait: true
        definition:
          kind: DeploymentConfig
          apiVersion: apps.openshift.io/v1
          metadata:
            annotations:
              template.alpha.openshift.io/wait-for-ready: 'true'
            labels:
              app: provider-spotify
              template: opendj-nodejs-provider-spotify
            name: provider-spotify
            namespace: "{{ENV.COMMON.NAMESPACE|mandatory}}"
          spec:
            replicas: "{{ENV.PROVIDER_SPOTIFY.REPLICAS | default('1')}}"
            revisionHistoryLimit: 10
            selector:
              name: provider-spotify
            strategy:
              activeDeadlineSeconds: 21600
              resources: {}
              rollingParams:
                intervalSeconds: 1
                maxSurge: 25%
                maxUnavailable: 25%
                timeoutSeconds: 600
                updatePeriodSeconds: 1
              type: Rolling
            template:
              metadata:
                labels:
                  name: provider-spotify
                name: provider-spotify
              spec:
                containers:
                  - env:
                      - name: LOG_LEVEL
                        value: "{{ENV.PROVIDER_SPOTIFY.LOG_LEVEL | default('info')}}"
                      - name: COMPRESS_RESULT
                        value: "true"
                      - name: PORT
                        value: "8080"
                      - name: DATAGRID_URL
                        value: "{{ENV.BACKEND_DATAGRiD.URL | default('backend-datagrid:11222')}}" 
                      - name: SPOTIFY_CALLBACK_URL
                        value: "{{ENV.PROVIDER_SPOTIFY.SPOTIFY_CALLBACK_URL | mandatory}}" 
                      - name: SPOTIFY_REFRESH_TOKEN_INTERVAL
                        value: "{{ENV.PROVIDER_SPOTIFY.SPOTIFY_REFRESH_TOKEN_INTERVAL | default('60000')}}" 
                      - name: SPOTIFY_REFRESH_TOKEN_OFFSET
                        value: "{{ENV.PROVIDER_SPOTIFY.SPOTIFY_REFRESH_TOKEN_OFFSET | default('300000')}}" 
                      - name: SPOTIFY_REFRESH_TOKEN_OFFSET_RANDOM
                        value: "{{ENV.PROVIDER_SPOTIFY.SPOTIFY_REFRESH_TOKEN_OFFSET_RANDOM | default('180000')}}" 
                      - name: SPOTIFY_TRACK_DETAIL_NUM_GENRES
                        value: "{{ENV.PROVIDER_SPOTIFY.SPOTIFY_TRACK_DETAIL_NUM_GENRES | default('1')}}"      
                      - name: SPOTIFY_TRACK_DETAIL_NUM_ARTISTS
                        value: "{{ENV.PROVIDER_SPOTIFY.SPOTIFY_TRACK_DETAIL_NUM_ARTISTS | default('1')}}"      
                      - name: SPOTIFY_SEARCH_LIMIT
                        value: "{{ENV.PROVIDER_SPOTIFY.SPOTIFY_SEARCH_LIMIT | default('20')}}"     
                      - name: "SPOTIFY_AUTOSELECT_DEVICE"
                        value: "{{ENV.PROVIDER_SPOTIFY.SPOTIFY_AUTOSELECT_DEVICE | default('true')}}"
                      - name: SPOTIFY_RETRIES 
                        value: "{{ENV.PROVIDER_SPOTIFY.SPOTIFY_RETRIES | default('1')}}"
                      - name: SPOTIFY_RETRY_TIMEOUT_MIN
                        value: "{{ENV.PROVIDER_SPOTIFY.SPOTIFY_RETRY_TIMEOUT_MIN | default('1000')}}" 
                      - name:  SPOTIFY_RETRY_TIMEOUT_MAX
                        value: "{{ENV.PROVIDER_SPOTIFY.SPOTIFY_RETRY_TIMEOUT_MAX | default('1000')}}"
                    envFrom:
                      - prefix: SPOTIFY_
                        secretRef:
                          name: spotify-api-credentials
                    imagePullPolicy: IfNotPresent
                    name: provider-spotify
                    ports:
                      - containerPort: 8080
                        protocol: TCP
                    readinessProbe:
                      failureThreshold: 3
                      httpGet:
                        path: /api/provider-spotify/v1/ready
                        port: 8080
                        scheme: HTTP
                      initialDelaySeconds: 1
                      periodSeconds: 10
                      successThreshold: 1
                      timeoutSeconds: 1
                    resources:
                      limits:
                        memory: 80Mi
                    terminationMessagePath: /dev/termination-log
                    terminationMessagePolicy: File
                dnsPolicy: ClusterFirst
                restartPolicy: Always
                schedulerName: default-scheduler
                securityContext: {}
                terminationGracePeriodSeconds: 30
            test: false
            triggers:
              - imageChangeParams:
                  automatic: true
                  containerNames:
                    - provider-spotify
                  from:
                    kind: ImageStreamTag
                    name: 'provider-spotify:{{ENV.COMMON.CONTAINER_IMAGE_TAG}}'
                    namespace: "{{ENV.COMMON.CONTAINER_IMAGE_FROM_NAMESPACE | mandatory}}"
                type: ImageChange
              - type: ConfigChange
    - name: Create Service
      k8s:
        state: present
        wait: true
        definition:
          kind: Service
          apiVersion: v1
          metadata:
            annotations:
            labels:
              app: provider-spotify
            name: provider-spotify
            namespace: "{{ENV.COMMON.NAMESPACE|mandatory}}"
          spec:
            ports:
              - name: web
                port: 8080
                protocol: TCP
                targetPort: 8080
            selector:
              name: provider-spotify
            sessionAffinity: None
            type: ClusterIP
    - name: Create Route with Let's Encrypt Certs
      when: ENV.FRONTEND_WEB.USE_ACME_CERTS|bool
      k8s:
        state: present
        wait: true
        definition:
          kind: Route
          apiVersion: route.openshift.io/v1
          metadata:
            annotations:
              kubernetes.io/tls-acme: "true"
            labels:
              app: provider-spotify
            name: provider-spotify
            namespace: "{{ENV.COMMON.NAMESPACE|mandatory}}"
          spec:
            host: "{{ENV.COMMON.DNS_BASENAME|mandatory}}"
            path: /api/provider-spotify
            port:
              targetPort: web
              tls:
                insecureEdgeTerminationPolicy: "{{ENV.FRONTEND_WEB.INSECURE_EDGE_TERMINATION}}"
                termination: "edge"
            to:
              kind: Service
              name: provider-spotify
              weight: 100
            wildcardPolicy: None
    - name: Create Route with custom certs
      when: not ENV.FRONTEND_WEB.USE_ACME_CERTS|bool
      k8s:
        state: present
        wait: true
        definition:
          kind: Route
          apiVersion: route.openshift.io/v1
          metadata:
            labels:
              app: provider-spotify
            name: provider-spotify
            namespace: "{{ENV.COMMON.NAMESPACE|mandatory}}"
          spec:
            host: "{{ENV.COMMON.DNS_BASENAME|mandatory}}"
            path: /api/provider-spotify
            port:
              targetPort: web
            tls:
              insecureEdgeTerminationPolicy: "{{ENV.FRONTEND_WEB.INSECURE_EDGE_TERMINATION}}"
              termination: "edge"
              certificate: "{{ENV.FRONTEND_WEB.TLS_CERT}}"
              key: "{{ENV.FRONTEND_WEB.TLS_KEY}}"
            to:
              kind: Service
              name: provider-spotify
              weight: 100
            wildcardPolicy: None
            

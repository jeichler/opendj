---
- name: Install frontend-web
  gather_facts: false
  hosts: localhost
  vars_files:
    - ../../../install/openshift/vars_secrets.yml
    - ../../../install/openshift/vars_common.yml
    - ../../../install/openshift/vars_env_{{ STAGE }}.yml
  tasks:
    - name: "Combine env facts"
      tags: always
      set_fact:
        ENV: "{{ common | combine( specific, recursive=True) }}"

    - name: Skip deployment if not needed
      meta: end_play
      when: not ENV.FRONTEND_WEB.DEPLOY


# See https://github.com/tnozicka/openshift-acme/tree/master/deploy/letsencrypt-live/single-namespace
    - name: Deploy opensfhit-acme for lets encrypt certs
      when: ENV.FRONTEND_WEB.USE_ACME_CERTS|bool
      when: false
      shell: |
        oc project {{ENV.COMMON.NAMESPACE|mandatory}}
        oc apply -fhttps://raw.githubusercontent.com/tnozicka/openshift-acme/master/deploy/single-namespace/{role,serviceaccount,issuer-letsencrypt-live,deployment}.yaml
        oc create rolebinding openshift-acme --role=openshift-acme --serviceaccount="$( oc project -q ):openshift-acme" --dry-run -o yaml | oc apply -f -
#        oc patch deployment openshift-acme -p '{"spec": {"template": {"spec": {"containers": [{"name": "openshift-acme","resources": {"limits": {"memory": "80Mi"}}}]}}}}'
      register: acmedeploy
      changed_when: "'created' in acmedeploy.stdout" 

    - name: Create Image Stream for S2I Builder Image
      when: ENV.COMMON.CONTAINER_IMAGE_BUILD
      k8s:
        state: present
        wait: true
        definition:
          kind: ImageStream
          apiVersion: image.openshift.io/v1
          metadata:
            labels:
              app: frontend-web
            name: frontend-web-s2i-builder
            namespace: "{{ENV.COMMON.NAMESPACE|mandatory}}"
          spec:
            lookupPolicy:
              local: false
            tags:
              - annotations: null
                from:
                  kind: DockerImage
                  name: nodeshift/centos7-s2i-web-app
                generation: 2
                importPolicy:
                  scheduled : true
                name: latest
                referencePolicy:
                  type: Local

    - name: Create Image Stream for Runtime Base Image
      when: ENV.COMMON.CONTAINER_IMAGE_BUILD
      k8s:
        state: present
        wait: true
        definition:
          kind: ImageStream
          apiVersion: image.openshift.io/v1
          metadata:
            labels:
              app: frontend-web
            name: frontend-web-runtime-base
            namespace: "{{ENV.COMMON.NAMESPACE|mandatory}}"
          spec:
            lookupPolicy:
              local: false
            tags:
              - annotations: null
                from:
                  kind: DockerImage
                  name: registry.redhat.io/rhscl/httpd-24-rhel7
                generation: 2
                importPolicy:
                  scheduled : true
                name: latest
                referencePolicy:
                  type: Local

    - name: Create Image Stream for Component Artifact Image
      when: ENV.COMMON.CONTAINER_IMAGE_BUILD
      k8s:
        state: present
        wait: true
        definition:
          kind: ImageStream
          apiVersion: image.openshift.io/v1
          metadata:
            labels:
              app: frontend-web
            name: frontend-web-artifact
            namespace: "{{ENV.COMMON.NAMESPACE|mandatory}}"
          spec:
            lookupPolicy:
              local: false

    - name: Create Image Stream for Component Runtime Image
      when: 
        - ENV.COMMON.CONTAINER_IMAGE_BUILD 
        - ENV.FRONTEND_WEB.USE_RUNTIME_IMAGE
      k8s:
        state: present
        wait: true
        definition:
          kind: ImageStream
          apiVersion: image.openshift.io/v1
          metadata:
            labels:
              app: frontend-web
            name: frontend-web
            namespace: "{{ENV.COMMON.NAMESPACE|mandatory}}"
          spec:
            lookupPolicy:
              local: false

    - name: Create ImageStreamTag for external Registry
      when: ENV.COMMON.CONTAINER_IMAGE_FROM_EXTERNAL_REGISTRY
      k8s:
        state: present
        wait: true
        definition:
          kind: ImageStream
          apiVersion: image.openshift.io/v1
          metadata:
            labels:
              app: frontend-web
            name: frontend-web
            namespace: "{{ENV.COMMON.NAMESPACE|mandatory}}"
          spec:
            lookupPolicy:
              local: false
            tags:
              - annotations: null
                from:
                  kind: DockerImage
                  name: "{{ENV.COMMON.CONTAINER_IMAGE_EXTERNAL_REGISTRY}}/frontend-web:{{ENV.COMMON.CONTAINER_IMAGE_TAG}}"
                generation: 2
                importPolicy:
                  scheduled : true
                name: "{{ENV.COMMON.CONTAINER_IMAGE_TAG}}"
                referencePolicy:
                  type: Local


    - name: Create BuildConfig S2I artifact
      when: ENV.COMMON.CONTAINER_IMAGE_BUILD
      k8s:
        state: present
        wait: true
        definition:
          kind: BuildConfig
          apiVersion: build.openshift.io/v1
          metadata:
            labels:
              app: frontend-web
            name: frontend-web-s2i
            namespace: "{{ENV.COMMON.NAMESPACE|mandatory}}"
          spec:
            failedBuildsHistoryLimit: 5
            nodeSelector: null
            output:
              to:
                kind: ImageStreamTag
                name: frontend-web-artifact:latest
            postCommit: {}
# Was need to build on employee openshift due to quota constraints
# but is not needed any more as we build on stormshift:
#            resources: 
#              limits:
#                memory: 2048Mi
            runPolicy: Serial
            source:
              contextDir: components/frontend-web
              git:
                ref: "{{ENV.COMMON.GIT.REF}}"
                uri: https://github.com/opendj/opendj.git
              type: Git
            strategy:
              sourceStrategy:
                env:
                  - name: OUTPUT_DIR
                    value: www
                from:
                  kind: ImageStreamTag
                  name: 'frontend-web-s2i-builder:latest'
                incremental: true
              type: Source
            successfulBuildsHistoryLimit: 2
            triggers:
            - imageChange:
              type: ImageChange
            - type: ConfigChange
            - github:
                secret: h3tRODIyPu7C6Y7Ucxp2bpgViyq32C4ldH5SRaL8
              type: GitHub
            - generic:
                secret: rEVLkWDcrlBoPuionusPj0CL4A1H1DsFCMYPCdSw
              type: Generic
    - name: Create BuildConfig Runtime image
      when: 
        - ENV.COMMON.CONTAINER_IMAGE_BUILD 
        - ENV.FRONTEND_WEB.USE_RUNTIME_IMAGE
      k8s:
        state: present
        wait: true
        definition:
          kind: BuildConfig
          apiVersion: build.openshift.io/v1
          metadata:
            labels:
              app: frontend-web
            name: frontend-web-runtime
            namespace: "{{ENV.COMMON.NAMESPACE|mandatory}}"
          spec:
            failedBuildsHistoryLimit: 5
            nodeSelector: null
            output:
              to:
                kind: ImageStreamTag
                name: frontend-web:latest
            postCommit: {}
            runPolicy: Serial
            source:
              dockerfile: |-
                FROM openshift/httpd:2.4                 
                COPY ./artifact/app-root/src/my-httpd.conf /etc/httpd/conf/httpd.conf
                COPY ./artifact/app-root/output /var/www/html/
              images:
              - from: 
                  kind: ImageStreamTag
                  name: frontend-web-artifact:latest
                paths: 
                - sourcePath: /opt/app-root
                  destinationDir: "./artifact"
            strategy:
              dockerStrategy:
                from: 
                  kind: ImageStreamTag
                  name: httpd:2.4  
                  namespace: openshift
            triggers:
              - imageChange:
                  from:
                    kind: ImageStreamTag
                    name: frontend-web-artifact:latest
                    namespace: dfroehli-opendj-dev
                type: ImageChange
              - imageChange:
                  from:
                    kind: ImageStreamTag
                    name: httpd:2.4  
                    namespace: openshift
                type: ImageChange
            

    - name: Create ConfigMap
      k8s:
        state: present
        definition: "{{ lookup('template', 'cfgmap.j2') }}"

    - name: Create DeploymentConfig Runtime Image
      k8s:
        state: present
        definition:
          kind: DeploymentConfig
          apiVersion: apps.openshift.io/v1
          metadata:
            labels:
              app: frontend
              app.kubernetes.io/part-of: frontend
            name: frontend-web
            namespace: "{{ENV.COMMON.NAMESPACE|mandatory}}"
            annotations:
#              app.openshift.io/connects-to: 'service-web,service-playlist,provider-spotify'
          spec:
            replicas: 2
            revisionHistoryLimit: 5
            selector:
              name: frontend-web
            strategy:
              activeDeadlineSeconds: 21600
              resources: {}
              rollingParams:
                intervalSeconds: 1
                maxSurge: 25%
                maxUnavailable: 25%
                timeoutSeconds: 600
                updatePeriodSeconds: 1
              type: Rolling
            template:
              metadata:
                labels:
                  name: frontend-web
                name: frontend-web
              spec:
                containers:
                  - env:
                    imagePullPolicy: IfNotPresent
                    name: frontend-web
                    ports:
                      - containerPort: 8080
                        protocol: TCP
                    readinessProbe:
                      failureThreshold: 3
                      httpGet:
                        path: /api/frontend-web/v1/ready
                        port: 8080
                        scheme: HTTP
                      initialDelaySeconds: 1
                      periodSeconds: 10
                      successThreshold: 1
                      timeoutSeconds: 1
                    resources:
                      limits:
                        memory: 128Mi
                        cpu: 1000m
                      requests:
                        memory: 128Mi
                        cpu: 0
                    terminationMessagePath: /dev/termination-log
                    terminationMessagePolicy: File
                    volumeMounts:
                      - mountPath: /var/www/html/conf/config.json
                        name: volume-cfgmap
                        subPath: config.json
                dnsPolicy: ClusterFirst
                restartPolicy: Always
                schedulerName: default-scheduler
                securityContext: {}
                terminationGracePeriodSeconds: 30
                volumes:
                  - configMap:
                      defaultMode: 438
                      name: frontend-web-config-map
                    name: volume-cfgmap
            test: false
            triggers:
              - imageChangeParams:
                  automatic: true
                  containerNames:
                    - frontend-web
                  from:
                    kind: ImageStreamTag
                    name: 'frontend-web:{{ENV.COMMON.CONTAINER_IMAGE_TAG}}'
                    namespace: "{{ENV.COMMON.CONTAINER_IMAGE_FROM_NAMESPACE|mandatory}}"
                type: ImageChange
              - type: ConfigChange

    - name: Create Service
      k8s:
        state: present
        definition:
          kind: Service
          apiVersion: v1
          metadata:
            labels:
              app: frontend-web
            name: frontend-web
            namespace: "{{ENV.COMMON.NAMESPACE|mandatory}}"
          spec:
            ports:
              - name: web
                port: 8080
                protocol: TCP
                targetPort: 8080
            selector:
              name: frontend-web
            sessionAffinity: None
            type: ClusterIP

    - name: Create Route with Let's Encrypt Certs
      when: ENV.FRONTEND_WEB.USE_ACME_CERTS|bool
      k8s:
        state: present
        definition:
          kind: Route
          apiVersion: route.openshift.io/v1
          metadata:
            annotations:
              haproxy.router.openshift.io/balance: "roundrobin"
              kubernetes.io/tls-acme: "true"
            labels:
              app: frontend-web
            name: frontend-web
            namespace: "{{ENV.COMMON.NAMESPACE|mandatory}}"
          spec:
            host: "{{ENV.COMMON.DNS_BASENAME|mandatory}}"
#            path: /api/frontend-web
            port:
              targetPort: web
              tls:
                insecureEdgeTerminationPolicy: "{{ENV.FRONTEND_WEB.INSECURE_EDGE_TERMINATION}}"
                termination: "edge"
            to:
              kind: Service
              name: frontend-web
              weight: 100
            wildcardPolicy: None
            
    - name: Create Route with custom certs
      when: not ENV.FRONTEND_WEB.USE_ACME_CERTS|bool
      k8s:
        state: present
        definition:
          kind: Route
          apiVersion: route.openshift.io/v1
          metadata:
            annotations:
              haproxy.router.openshift.io/balance: "roundrobin"
            labels:
              app: frontend-web
            name: frontend-web
            namespace: "{{ENV.COMMON.NAMESPACE|mandatory}}"
          spec:
            host: "{{ENV.COMMON.DNS_BASENAME|mandatory}}"
#            path: /api/frontend-web
            port:
              targetPort: web
            tls:
              insecureEdgeTerminationPolicy: "{{ENV.FRONTEND_WEB.INSECURE_EDGE_TERMINATION}}"
              termination: "edge"
              certificate: "{{ENV.FRONTEND_WEB.TLS_CERT}}"
              key: "{{ENV.FRONTEND_WEB.TLS_KEY}}"
            to:
              kind: Service
              name: frontend-web
              weight: 100
            wildcardPolicy: None
            
---
- hosts: localhost
  vars_files:
    - ../../../install/openshift/vars_common.yml
    - ../../../install/openshift/vars_env_{{ STAGE }}.yml
  tasks:
# See https://github.com/tnozicka/openshift-acme/tree/master/deploy/letsencrypt-live/single-namespace
    - name: Deploy opensfhit-acme for lets encrypt certs
      when: FRONTEND_USE_ACME_CERTS|bool
      shell: |
        oc create -fhttps://raw.githubusercontent.com/tnozicka/openshift-acme/master/deploy/letsencrypt-live/single-namespace/{role,serviceaccount,imagestream,deployment}.yaml
        oc policy add-role-to-user openshift-acme --role-namespace="$(oc project --short)" -z openshift-acme
        oc patch deployment openshift-acme -p '{"spec": {"template": {"spec": {"containers": [{"name": "openshift-acme","resources": {"limits": {"memory": "80Mi"}}}]}}}}'
      register: acmedeploy
      changed_when: "'AlreadyExists' not in acmedeploy.stderr" 

    - name: Create Image Stream 
      k8s:
        state: present
        wait: true
        definition:
          kind: ImageStream
          apiVersion: image.openshift.io/v1
          metadata:
            annotations:
            labels:
              app: frontend-web
            name: frontend-web
            namespace: "{{NAMESPACE}}"
          spec:
            lookupPolicy:
              local: false
    - name: Create Image Stream for Build Image
      k8s:
        state: present
        wait: true
        definition:
          kind: ImageStream
          apiVersion: image.openshift.io/v1
          metadata:
            annotations:
            labels:
              app: frontend-web
            name: centos7-s2i-web-app
            namespace: "{{NAMESPACE}}"
          spec:
            lookupPolicy:
              local: false
            tags:
              - annotations: null
                from:
                  kind: DockerImage
                  name: nodeshift/centos7-s2i-web-app
                generation: 2
                importPolicy:
                  scheduled : true
                name: latest
                referencePolicy:
                  type: Local
            
    - name: Create BuildConfig
      k8s:
        state: present
        wait: true
        definition:
          kind: BuildConfig
          apiVersion: build.openshift.io/v1
          metadata:
            annotations:
            labels:
              app: frontend-web
            name: frontend-web
            namespace: "{{NAMESPACE}}"
          spec:
            failedBuildsHistoryLimit: 5
            nodeSelector: null
            output:
              to:
                kind: ImageStreamTag
                name: frontend-web:latest
            postCommit: {}
            resources: 
              limits:
                memory: 1568Mi
            runPolicy: Serial
            source:
              contextDir: components/frontend-web
              git:
                ref: "{{GIT_REF}}"
                uri: https://github.com/opendj/opendj.git
              type: Git
            strategy:
              sourceStrategy:
                env:
                  - name: OUTPUT_DIR
                    value: www
                from:
                  kind: ImageStreamTag
                  name: 'centos7-s2i-web-app:latest'
                incremental: true
              type: Source
            successfulBuildsHistoryLimit: 2
            triggers:
            - imageChange:
              type: ImageChange
            - type: ConfigChange
            - github:
                secret: h3tRODIyPu7C6Y7Ucxp2bpgViyq32C4ldH5SRaL8
              type: GitHub
            - generic:
                secret: rEVLkWDcrlBoPuionusPj0CL4A1H1DsFCMYPCdSw
              type: Generic

    - name: Create ConfigMap
      k8s:
        state: present
        wait: true
        definition: "{{ lookup('template', 'cfgmap.j2') }}"

    - name: Create DeploymentConfig
      k8s:
        state: present
        wait: true
        definition:
          kind: DeploymentConfig
          apiVersion: apps.openshift.io/v1
          metadata:
            annotations:
              template.alpha.openshift.io/wait-for-ready: 'true'
            labels:
              app: frontend-web
            name: frontend-web
            namespace: "{{NAMESPACE}}"
          spec:
            replicas: 1
            revisionHistoryLimit: 5
            selector:
              name: frontend-web
            strategy:
              activeDeadlineSeconds: 21600
              resources: {}
              rollingParams:
                intervalSeconds: 1
                maxSurge: 25%
                maxUnavailable: 25%
                timeoutSeconds: 600
                updatePeriodSeconds: 1
              type: Rolling
            template:
              metadata:
                labels:
                  name: frontend-web
                name: frontend-web
              spec:
                containers:
                  - env:
                    imagePullPolicy: IfNotPresent
                    name: frontend-web
                    ports:
                      - containerPort: 8080
                        protocol: TCP
                    readinessProbe:
                      failureThreshold: 3
                      httpGet:
                        path: /api/frontend-web/v1/ready
                        port: 8080
                        scheme: HTTP
                      initialDelaySeconds: 1
                      periodSeconds: 10
                      successThreshold: 1
                      timeoutSeconds: 1
                    resources:
                      limits:
                        memory: 512Mi
                    terminationMessagePath: /dev/termination-log
                    terminationMessagePolicy: File
                    volumeMounts:
                      - mountPath: /opt/app-root/output/conf/config.json
                        name: volume-cfgmap
                        subPath: config.json
                dnsPolicy: ClusterFirst
                restartPolicy: Always
                schedulerName: default-scheduler
                securityContext: {}
                terminationGracePeriodSeconds: 30
                volumes:
                  - configMap:
                      defaultMode: 438
                      name: frontend-web-config-map
                    name: volume-cfgmap
            test: false
            triggers:
              - imageChangeParams:
                  automatic: true
                  containerNames:
                    - frontend-web
                  from:
                    kind: ImageStreamTag
                    name: 'frontend-web:latest'
                    namespace: "{{NAMESPACE}}"
                type: ImageChange
              - type: ConfigChange

    - name: Create Service
      k8s:
        state: present
        wait: true
        definition:
          kind: Service
          apiVersion: v1
          metadata:
            annotations:
            labels:
              app: frontend-web
            name: frontend-web
            namespace: "{{NAMESPACE}}"
          spec:
            ports:
              - name: web
                port: 8080
                protocol: TCP
                targetPort: 8080
            selector:
              name: frontend-web
            sessionAffinity: None
            type: ClusterIP
    - name: Create Route with Let's Encrypt Certs
      when: FRONTEND_USE_ACME_CERTS|bool
      k8s:
        state: present
        wait: true
        definition:
          kind: Route
          apiVersion: route.openshift.io/v1
          metadata:
            annotations:
              kubernetes.io/tls-acme: "true"
            labels:
              app: frontend-web
            name: frontend-web
            namespace: "{{NAMESPACE}}"
          spec:
            host: "{{DNS_BASENAME}}"
#            path: /api/frontend-web
            port:
              targetPort: web
              tls:
                insecureEdgeTerminationPolicy: "Allow"
                termination: "edge"
            to:
              kind: Service
              name: frontend-web
              weight: 100
            wildcardPolicy: None
            
    - name: Create Route with provided certs
      when: not FRONTEND_USE_ACME_CERTS|bool
      k8s:
        state: present
        wait: true
        definition:
          kind: Route
          apiVersion: route.openshift.io/v1
          metadata:
            annotations:
              kubernetes.io/tls-acme: "true"
            labels:
              app: frontend-web
            name: frontend-web
            namespace: "{{NAMESPACE}}"
          spec:
            host: "{{DNS_BASENAME}}"
#            path: /api/frontend-web
            port:
              targetPort: web
            tls:
              insecureEdgeTerminationPolicy: "Allow"
              termination: "edge"
              certificate: "{{FRONTEND_TLS_CERT}}"
              key: "{{FRONTEND_TLS_KEY}}"
            to:
              kind: Service
              name: frontend-web
              weight: 100
            wildcardPolicy: None
            
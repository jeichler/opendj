---
- name: Install service-playlist
  gather_facts: false
  hosts: localhost
  vars_files:
    - ../../../install/openshift/vars_secrets.yml
    - ../../../install/openshift/vars_common.yml
    - ../../../install/openshift/vars_env_{{ STAGE }}.yml
  tasks:
    - name: "Combine env facts"
      tags: always
      set_fact:
        ENV: "{{ common | combine( specific, recursive=True) }}"

    - name: Skip deployment if not needed
      meta: end_play
      when: not ENV.SERVICE_PLAYLIST.DEPLOY

    - name: Create kafka topic
      when: ENV.BACKEND_EVENTSTORE.KAFKA.USE
      command: "{{ENV.BACKEND_EVENTSTORE.KAFKA.TOPIC_CMD|mandatory}} --create --topic opendj.data.event --partitions {{ENV.BACKEND_EVENTSTORE.KAFKA.NUM_PARTITIONS}} --replication-factor {{ENV.BACKEND_EVENTSTORE.KAFKA.NUM_BROKERS}}  --config retention.ms=43200000" 
      register: topic_result
      failed_when: 'topic_result.rc != 0 and "already exists" not in topic_result.stderr'
      changed_when: '"already exists" not in topic_result.stderr'
      
    - name: Create ImageStreamTag
      when: ENV.COMMON.CONTAINER_IMAGE_BUILD
      k8s:
        state: present
        definition:
          kind: ImageStream
          apiVersion: image.openshift.io/v1
          metadata:
            labels:
              app: service-playlist
            name: service-playlist
            namespace: "{{ENV.COMMON.NAMESPACE|mandatory}}"
          spec:
            lookupPolicy:
              local: false
    - name: Create BuildConfig
      when: ENV.COMMON.CONTAINER_IMAGE_BUILD
      k8s:
        state: present
        definition:
          kind: BuildConfig
          apiVersion: build.openshift.io/v1
          metadata:
            labels:
              app: service-playlist
            name: service-playlist
            namespace: "{{ENV.COMMON.NAMESPACE|mandatory}}"
          spec:
            failedBuildsHistoryLimit: 5
            nodeSelector: null
            output:
              to:
                kind: ImageStreamTag
                name: service-playlist:latest
            postCommit: {}
            resources: {}
            runPolicy: Serial
            source:
              contextDir: components/service-playlist
              git:
                ref: "{{ENV.COMMON.GIT.REF | default('master')}}"
                uri: https://github.com/opendj/opendj.git
              type: Git
            strategy:
              sourceStrategy:
                env:
                from:
                  kind: ImageStreamTag
                  name: "nodejs:10"
                  namespace: openshift
              type: Source
            successfulBuildsHistoryLimit: 2
            triggers:
            - imageChange:
              type: ImageChange
            - type: ConfigChange
            - github:
                secret: f8020eeb6055607a
              type: GitHub
            - generic:
                secret: 86c8f4979ce31b6c
              type: Generic
    - name: Create DeploymentConfig
      k8s:
        state: present
        wait: true
        definition:
          kind: DeploymentConfig
          apiVersion: apps.openshift.io/v1
          metadata:
            annotations:
              template.alpha.openshift.io/wait-for-ready: 'true'
            labels:
              app: service-playlist
            name: service-playlist
            namespace: "{{ENV.COMMON.NAMESPACE|mandatory}}"
          spec:
            replicas: "{{ENV.SERVICE_PLAYLIST.REPLICAS | default('1')}}" 
            revisionHistoryLimit: 10
            selector:
              name: service-playlist
            strategy:
              activeDeadlineSeconds: 21600
              resources: {}
              rollingParams:
                intervalSeconds: 1
                maxSurge: 25%
                maxUnavailable: 25%
                timeoutSeconds: 600
                updatePeriodSeconds: 1
              type: Rolling
            template:
              metadata:
                labels:
                  name: service-playlist
                name: service-playlist
              spec:
                containers:
                  - env:
                      - name: PORT
                        value: "8081" 
                      - name: LOG_LEVEL
                        value: "{{ENV.SERVICE_PLAYLIST.LOG_LEVEL | default('info')}}"
                      - name: COMPRESS_RESULT
                        value: "true"
                      - name: KAFKA_HOST
                        value: "{{ENV.BACKEND_EVENTSTORE.KAFKA.HOST  | default('backend-eventstore-kafka-bootstrap:9092')}}"
                      - name: DATAGRID_URL
                        value: "{{ENV.BACKEND_DATAGRID.URL | default('backend-datagrid:11222')}}" 
                      - name: SPOTIFY_PROVIDER_URL
                        value: "{{ENV.SERVICE_PLAYLIST.SPOTIFY_PROVIDER_URL | default('http://provider-spotify:8080/api/provider-spotify/v1/')}}"   
                      - name: EVENTACTIVITY_PROVIDER_URL
                        value: "{{ENV.SERVICE_EVENTACTIVITY.PROVIDER_URL | default('http://service-eventactivity:8080/api/service-eventactivity/v1/')}}"   
                      - name: EVENT_URL
                        value: "{{ENV.COMMON.DNS_BASENAME | default('localhost:8080')}}"
                      - name: DEFAULT_AUTOFILL_EMPTY_PLAYLIST
                        value: "{{ENV.SERVICE_PLAYLIST.DEFAULT_AUTOFILL_EMPTY_PLAYLIST | default('false')}}" 
                      - name: DEFAULT_IS_PLAYING
                        value: "{{ENV.SERVICE_PLAYLIST.DEFAULT_IS_PLAYING | default('true')}}"
                      - name: DEFAULT_ALLOW_DUPLICATE_TRACKS
                        value: "{{ENV.SERVICE_PLAYLIST.DEFAULT_ALLOW_DUPLICATE_TRACKS | default('false')}}"
                      - name: MOCKUP_AUTOSKIP_SECONDS
                        value: "{{ENV.SERVICE_PLAYLIST.MOCKUP_AUTOSKIP_SECONDS | default('0')}}"
                      - name: MOCKUP_NO_ACTUAL_PLAYING
                        value: "{{ENV.SERVICE_PLAYLIST.MOCKUP_NO_ACTUAL_PLAYING | default('false')}}" 
                      - name: INTERNAL_POLL_INTERVAL
                        value: "{{ENV.SERVICE_PLAYLIST.INTERNAL_POLL_INTERVAL | default('10000')}}" 
                    imagePullPolicy: IfNotPresent
                    name: service-playlist
                    ports:
                      - containerPort: 8081
                        protocol: TCP
                    readinessProbe:
                      failureThreshold: 3
                      httpGet:
                        path: /api/service-playlist/v1/ready
                        port: 8081
                        scheme: HTTP
                      initialDelaySeconds: 5
                      periodSeconds: 5
                      successThreshold: 1
                      timeoutSeconds: 1
                    livenessProbe:
                      failureThreshold: 3
                      httpGet:
                        path: /api/service-playlist/v1/health
                        port: 8081
                        scheme: HTTP
                      initialDelaySeconds: 5
                      periodSeconds: 5
                      successThreshold: 1
                      timeoutSeconds: 1
                    resources:
                      limits:
                        memory: 128Mi
                    terminationMessagePath: /dev/termination-log
                    terminationMessagePolicy: File
                dnsPolicy: ClusterFirst
                restartPolicy: Always
                schedulerName: default-scheduler
                securityContext: {}
                terminationGracePeriodSeconds: 30
            test: false
            triggers:
              - imageChangeParams:
                  automatic: true
                  containerNames:
                    - service-playlist
                  from:
                    kind: ImageStreamTag
                    name: 'service-playlist:{{ENV.COMMON.CONTAINER_IMAGE_TAG}}'
                    namespace: "{{ENV.COMMON.CONTAINER_IMAGE_FROM_NAMESPACE|mandatory}}"
                type: ImageChange
              - type: ConfigChange
    - name: Create Service
      k8s:
        state: present
        wait: true
        definition:
          kind: Service
          apiVersion: v1
          metadata:
            labels:
              app: service-playlist
            name: service-playlist
            namespace: "{{ENV.COMMON.NAMESPACE|mandatory}}"
          spec:
            ports:
              - name: web
                port: 8081
                protocol: TCP
                targetPort: 8081
            selector:
              name: service-playlist
            sessionAffinity: None
            type: ClusterIP
    - name: Create Route with Let's Encrypt Certs
      when: ENV.FRONTEND_WEB.USE_ACME_CERTS|bool
      k8s:
        state: present
        wait: true
        definition:
          kind: Route
          apiVersion: route.openshift.io/v1
          metadata:
            annotations:
              kubernetes.io/tls-acme: "true"
              haproxy.router.openshift.io/balance: "roundrobin"
            labels:
              app: service-playlist
            name: service-playlist
            namespace: "{{ENV.COMMON.NAMESPACE|mandatory}}"
          spec:
            host: "{{ENV.COMMON.DNS_BASENAME|mandatory}}"
            path: /api/service-playlist
            port:
              targetPort: web
              tls:
                insecureEdgeTerminationPolicy: "{{ENV.FRONTEND_WEB.INSECURE_EDGE_TERMINATION}}"
                termination: "edge"
            to:
              kind: Service
              name: service-playlist
              weight: 100
            wildcardPolicy: None
    - name: Create Route with custom certs
      when: not ENV.FRONTEND_WEB.USE_ACME_CERTS|bool
      k8s:
        state: present
        wait: true
        definition:
          kind: Route
          apiVersion: route.openshift.io/v1
          metadata:
            annotations:
              haproxy.router.openshift.io/balance: "roundrobin"
            labels:
              app: service-playlist
            name: service-playlist
            namespace: "{{ENV.COMMON.NAMESPACE|mandatory}}"
          spec:
            host: "{{ENV.COMMON.DNS_BASENAME|mandatory}}"
            path: /api/service-playlist
            port:
              targetPort: web
            tls:
              insecureEdgeTerminationPolicy: "{{ENV.FRONTEND_WEB.INSECURE_EDGE_TERMINATION}}"
              termination: "edge"
              certificate: "{{ENV.FRONTEND_WEB.TLS_CERT}}"
              key: "{{ENV.FRONTEND_WEB.TLS_KEY}}"
            to:
              kind: Service
              name: service-playlist
              weight: 100
            wildcardPolicy: None
